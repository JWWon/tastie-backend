on:
  workflow_run:
    workflows: ["Build And Push"]
    types: [completed]
    branches: [master]
name: Deploy for alpha

env:
  INFRA_REPO: gghcode/tastie-infrastructure
  ENV: alpha
  PROJECT: backend
  PROJECT_PATH: ap-northeast-2/apprunner/alpha/backend

jobs:
  deploy:
    runs-on: ubuntu-20.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      DB_HOST: ${{ secrets.ALPHA_DB_HOST }}
      DB_USERNAME: ${{ secrets.ALPHA_DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.ALPHA_DB_PASSWORD }}
      DB_DBNAME: ${{ secrets.ALPHA_DB_DBNAME }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ env.INFRA_REPO }}
          token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}

      - name: Install gh cli
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Get Version
        id: get-version
        env:
          SHA: ${{ github.sha }}
        run: |
          echo "::set-output name=version::${SHA:0:9}"

      - name: Get Actor Email
        id: get-email
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { data } = await github.users.getByUsername({
              username: context.actor,
            })
            return data.email

      - name: Apply New Version
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
          VERSION: ${{ steps.get-version.outputs.version }}
          ACTOR_NAME: ${{ github.actor }}
          ACTOR_EMAIL: ${{ steps.get-email.outputs.result }}
          TARGET_BRANCH: deploy/alpha-apprunner-backend-${{ steps.get-version.outputs.version }}
        run: |
          git config pull.rebase true
          git config user.name "$ACTOR_NAME"
          git config user.email "$ACTOR_EMAIL"
          git checkout -b $TARGET_BRANCH
          cd $PROJECT_PATH
          echo $VERSION > version.txt
          git add .
          git commit -m "ci($ENV/$PROJECT): update version $VERSION"
          git push origin $TARGET_BRANCH

          gh pr create --title "Deploy $TARGET_BRANCH" --body "Deploy $TARGET_BRANCH" --base main --head $TARGET_BRANCH

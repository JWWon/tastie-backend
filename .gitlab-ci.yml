image: node:12.14.1-alpine

stages:
  - install_dependencies
  - inspect
  - before-deploy
  - migration
  - deploy

variables:
  DOCKER_DRIVER: overlay2

install_dependencies:
  stage: install_dependencies
  script:
    - npm install
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
  artifacts:
    paths:
      - node_modules/

build:
  stage: inspect
  image: docker:19.03.5-git
  services:
    - docker:19.03.5-dind
  script:
    - docker load < image/app.tar || true
    - docker build --cache-from app:latest -t app .
    - mkdir image/
    - docker save app > image/app.tar
  dependencies: []
  cache:
    key: docker-image-cache
    paths:
      - image/app.tar
  artifacts:
    paths:
      - image/app.tar

test:
  stage: inspect
  script:
    - npm run test

lint:
  stage: inspect
  script:
    - npm run lint:ci

build-docker-image:
  stage: before-deploy
  image: docker:19.03.5-git
  services:
    - docker:19.03.5-dind
  before_script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - DOCKER_TAG=$([ "$CI_COMMIT_REF_NAME" == "master" ] && echo "staging-b$CI_PIPELINE_ID" || echo "production-b$CI_PIPELINE_ID")
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$DOCKER_TAG .
    - docker push $CI_REGISTRY_IMAGE:$DOCKER_TAG
  variables:
    DOCKER_DRIVER: overlay2
  only:
    - master
    - production

migration-staging:
  stage: migration
  before_script:
    - npm install
  script:
    - npm run typeorm:run
  environment:
    name: staging
  only:
    - master

migration-production:
  stage: migration
  before_script:
    - npm install
  script:
    - npm run typeorm:run
  environment:
    name: production
  when: manual
  only:
    - production

deploy-staging:
  stage: deploy
  image: coxauto/aws-ebcli
  script:
    - apk --no-cache add gettext
    - git checkout -B "$CI_BUILD_REF_NAME" "$CI_BUILD_REF"
    - cd eb
    - cat Dockerrun.aws.json.template | envsubst > Dockerrun.aws.json
    - git add Dockerrun.aws.json
    - eb deploy --staged
    - cd ../ && EXIT_STATUS=$? scripts/to_slack.sh
  variables:
    ENVIRONMENT: staging
    APP_VERSION: "staging-b$CI_PIPELINE_ID"
    GIT_STRATEGY: clone
  environment:
    name: staging
    url: https://staging.tastie.me
  only:
    - master

deploy-production:
  stage: deploy
  image: coxauto/aws-ebcli
  script:
    - apk --no-cache add gettext
    - git checkout -B "$CI_BUILD_REF_NAME" "$CI_BUILD_REF"
    - cd eb
    - cat Dockerrun.aws.json.template | envsubst > Dockerrun.aws.json
    - git add Dockerrun.aws.json
    - eb deploy --staged
    - cd ../ && EXIT_STATUS=$? scripts/to_slack.sh
  variables:
    ENVIRONMENT: production
    APP_VERSION: "production-b$CI_PIPELINE_ID"
    GIT_STRATEGY: clone
  environment:
    name: production
    url: https://production.tastie.me
  when: manual
  only:
    - production
